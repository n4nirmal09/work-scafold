// custom mixins goes here  

// @mixin adjust-line-height($font-size){
//   font-size: $font-size !important;
//   line-height: ($font-size-base / $font-size)em !important;
// }


// break points 

@mixin bd-xl{
  @media screen and (min-width: $screen-xl){
    @content;
  }
}

@mixin bd-xl-bl{
  @media screen and (max-width: $screen-xl - 1){
    @content;
  }
}

@mixin bd-lg{
  @media screen and (min-width: $screen-lg){
    @content;
  }
}

@mixin bd-lg-bl{
  @media screen and (max-width: $screen-lg - 1){
    @content;
  }
}

@mixin bd-md{
  @media screen and (min-width: $screen-md){
    @content;
  }
}

@mixin bd-md-bl{
  @media screen and (max-width: $screen-md - 1){
    @content;
  }
}

@mixin bd-sm{
  @media screen and (min-width: $screen-sm){
    @content;
  }
}

@mixin bd-sm-bl{
  @media screen and (max-width: $screen-sm - 1){
    @content;
  }
}

@mixin bd-sm-md{
  @media screen and (min-width: $screen-sm) and (max-width: $screen-md - 1){
    @content;
  }
}


@mixin bd-custom-min($width){
   @media screen and (min-width: $width){
    @content;
  }
}
@mixin bd-custom-max($width){
   @media screen and (max-width: $width - 1){
    @content;
  }
}

@mixin bd-bw($from,$to){
   @media screen and (min-width: $from) and (max-width: $to - 1){
    @content;
  }
}

// fonts calculating ems

@mixin calculateRem($size,$font-size-relative) {
  font-size: $size;
  font-size: ($size / $font-size-relative) + rem; 
}


// fonts calculating rems. which are relative to html rather than the parent element

// @mixin calculateRem($sizeValue: 12 ){
//   font-size: $sizeValue + px; //fallback for old browsers
//   font-size: (0.125 * $sizeValue) + rem;
// }
// vw units
@function get-vw($target) {
  $vw-context: (1440 * 0.01) * 1px;
  @return ($target / $vw-context) * 1vw;
}

// border-radius 

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
      -ms-border-radius: $radius;
          border-radius: $radius;
}

// transtions and transforms 

@mixin transitions($prop)
{
  -webkit-transition: #{$prop};
     -moz-transition: #{$prop};
      -ms-transition: #{$prop};
          transition: #{$prop};
}
@mixin transition-delay($prop)
{
  -webkit-transition-delay: #{$prop};
     -moz-transition-delay: #{$prop};
      -ms-transition-delay: #{$prop};
          transition-delay: #{$prop};
}

@mixin transforms($prop)
{
  -webkit-transform: #{$prop};
     -moz-transform: #{$prop};
      -ms-transform: #{$prop};
          transform: #{$prop};
}

@mixin transform-origin($prop)
{
  -webkit-transform-origin: #{$prop};
     -moz-transform-origin: #{$prop};
      -ms-transform-origin: #{$prop};
          transform-origin: #{$prop};
}

@mixin perspective($prop)
{
  -webkit-perspective: #{$prop};
     -moz-perspective: #{$prop};
      -ms-perspective: #{$prop};
          perspective: #{$prop};
}

@mixin backface-visibility($prop)
{
  -webkit-backface-visibility: #{$prop};
     -moz-backface-visibility: #{$prop};
      -ms-backface-visibility: #{$prop};
          backface-visibility: #{$prop};
}


// opacity 
 
@mixin opacity($opacity)
{
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

// animations

@mixin keyframes($animation-name) {
  @-webkit-keyframes #{$animation-name} {
    @content;
  }
  @-moz-keyframes #{$animation-name} {
    @content;
  }  
  @-ms-keyframes #{$animation-name} {
    @content;
  }
  @-o-keyframes #{$animation-name} {
    @content;
  }  
  @keyframes #{$animation-name} {
    @content;
  }
}




@mixin appearance-none{
  
     -webkit-appearance:none;
     -moz-appearance:window;
     -ms-appearance:none;
     -o-appearance:none;
     appearance:none;
}

// font color dynamic change 

@mixin changefontcolor($bgcolor)
{
  @if(lightness($bgcolor) > 50)
  {
    color:#000;
  } @else {
    color:#fff;
  }
}

// border-radius 

@mixin border-radius($radius)
{
  -moz-border-radius: $radius;
  -webkit-border-radius: $radius;
  -o-border-radius: $radius;
  -ms-border-radius: $radius;
  border-radius: $radius;
}



@mixin box-shadow($prop)
{
  box-shadow: #{$prop};
  -webkit-box-shadow: #{$prop};
  -moz-box-shadow: #{$prop};
  -o-box-shadow: #{$prop};
  -ms-box-shadow: #{$prop};
}

@mixin text-shadow($prop)
{
  text-shadow: #{$prop};
  -webkit-text-shadow: #{$prop};
  -moz-text-shadow: #{$prop};
  -o-text-shadow: #{$prop};
  -ms-text-shadow: #{$prop};
}







// browser specific

@mixin moz{
  @-moz-document url-prefix(){
    @content;
  }
}


// Css flex magic

@mixin display-flex(){
  
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  
}



@mixin flex-prop($prop-name,$prop-value){
  -webkit-#{$prop-name} : $prop-value;
  -ms-#{$prop-name} : $prop-value;
  -moz-#{$prop-name} : $prop-value;
   #{$prop-name} : $prop-value;
}

@mixin align-items($value){
  -webkit-box-align: $value;
    -moz-box-align: $value;
    -webkit-align-items: $value;
    -ms-flex-align: $value;
    align-items: $value;
}
@mixin justify-content($value){

  -webkit-box-pack: $value;
    -moz-box-pack: $value;
    -webkit-justify-content: $value;
    -ms-flex-pack: $value;
    justify-content: $value;
}

@mixin flex-value($value){

  -webkit-box-flex: $value;      /* OLD - iOS 6-, Safari 3.1-6 */
  -moz-box-flex: $value;         /* OLD - Firefox 19- */              
  -webkit-flex: $value;          /* Chrome */
  -ms-flex: $value;              /* IE 10 */
  flex: $value;
}

//Calc

@mixin calc($property, $expression) {
  #{$property}: -moz-calc(#{$expression});
  #{$property}: -webkit-calc(#{$expression});
  #{$property}: calc(#{$expression});
}

//Center-align a block level element

@mixin center-block {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

// Text Overflow

@mixin text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// Linear gradients
@function is-direction($value) {
  $is-keyword: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
  $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));

  @return $is-keyword or $is-angle;
}

@function legacy-direction($value) {
  @if is-direction($value) == false {
    @error "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.";
  }

  $conversion-map: (
    to top          : bottom,
    to top right    : bottom left,
    to right top    : left bottom,
    to right        : left,
    to bottom right : top left,
    to right bottom : left top,
    to bottom       : top,
    to bottom left  : top right,
    to left bottom  : right top,
    to left         : right,
    to left top     : right bottom,
    to top left     : bottom right
  );

  @if map-has-key($conversion-map, $value) {
    @return map-get($conversion-map, $value);
  }

  @return 90deg - $value;
}
@mixin linear-gradient($direction, $color-stops...) {
  
  // Direction has been omitted and happens to be a color-stop
  @if is-direction($direction) == false {
    $color-stops: $direction, $color-stops;
    $direction: 180deg;
  }

  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background: linear-gradient($direction, $color-stops);
}









// ------------------ Grid offsets ---------------

@mixin grid_offset($offset) {
    @include clearfix;
    @if(($offset/2) > 15px) {

        @include bd-md {
            margin-left: -($offset/2);
            margin-right: -($offset/2);
            >[class*='col-'] {
                padding-left: ($offset/2);
                padding-right: ($offset/2);
            }
        }
    }
    @else {
        margin-left: -($offset/2);
        margin-right: -($offset/2);
        >[class*='col-'] {
            padding-left: ($offset/2);
            padding-right: ($offset/2);
        }
    }
}